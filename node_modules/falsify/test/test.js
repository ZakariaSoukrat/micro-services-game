/**
 * Created by instancetype on 7/3/15.
 */
 /* jshint bitwise : true, eqeqeq : true, forin : true, noarg : true, noempty : true, nonew : true, laxbreak : true, curly: false, mocha: true,
   asi : true, esnext : true, laxcomma : true, sub : true, browser : true, node : true, phantom : true, strict: false, eqnull: true, expr: true */

const
  falsify = require('../lib/falsify')
, expect = require('chai').expect



describe('falsify', function() {

  it('should be a function', function() {
    expect(falsify).to.be.an.instanceof(Function)
  })

  it('should return a function', function() {
    expect(falsify()).to.be.an.instanceof(Function)
  })


  describe("falsify's returned function", function() {

    describe('when created without passing anything to falsify', function() {
      it('should return the boolean value of an argument', function() {
        var getBooleanValue = falsify()

        expect(getBooleanValue(undefined)).to.be.false
        expect(getBooleanValue('')).to.be.false
        expect(getBooleanValue(0)).to.be.false
        expect(getBooleanValue(null)).to.be.false
        expect(getBooleanValue(false)).to.be.false
        expect(getBooleanValue(NaN)).to.be.false
        expect(getBooleanValue()).to.be.false
        expect(getBooleanValue(true)).to.be.true
        expect(getBooleanValue([])).to.be.true
        expect(getBooleanValue({})).to.be.true
        expect(getBooleanValue(1)).to.be.true
        expect(getBooleanValue('hi')).to.be.true
      })
    })

    describe('when created by passing a value to falsify', function() {
      it('should return false if the argument matches the value; otherwise should return the standard boolean value of the argument', function() {
        var isTruthyButNotTheBooleanLiteralTrue = falsify(true)

        expect(isTruthyButNotTheBooleanLiteralTrue(true)).to.be.false

        expect(isTruthyButNotTheBooleanLiteralTrue(0)).to.be.false
        expect(isTruthyButNotTheBooleanLiteralTrue(undefined)).to.be.false
        expect(isTruthyButNotTheBooleanLiteralTrue(NaN)).to.be.false
        expect(isTruthyButNotTheBooleanLiteralTrue(null)).to.be.false
        expect(isTruthyButNotTheBooleanLiteralTrue('')).to.be.false
        expect(isTruthyButNotTheBooleanLiteralTrue(false)).to.be.false
        expect(isTruthyButNotTheBooleanLiteralTrue('hi')).to.be.true
        expect(isTruthyButNotTheBooleanLiteralTrue({})).to.be.true
        expect(isTruthyButNotTheBooleanLiteralTrue([])).to.be.true
      })
    })

    describe('when created by passing multiple values to falsify', function() {
      it('should return false if the argument matches any of the values; otherwise should return the standard boolean value of the argument', function() {
        var
          someParticularObject = {}
        , isTruthyButNotHelloWorldOrSomeParticularObject = falsify('hello world', someParticularObject)

        expect(isTruthyButNotHelloWorldOrSomeParticularObject('hello world')).to.be.false
        expect(isTruthyButNotHelloWorldOrSomeParticularObject(someParticularObject)).to.be.false

        expect(isTruthyButNotHelloWorldOrSomeParticularObject(0)).to.be.false
        expect(isTruthyButNotHelloWorldOrSomeParticularObject(undefined)).to.be.false
        expect(isTruthyButNotHelloWorldOrSomeParticularObject(NaN)).to.be.false
        expect(isTruthyButNotHelloWorldOrSomeParticularObject(null)).to.be.false
        expect(isTruthyButNotHelloWorldOrSomeParticularObject('')).to.be.false
        expect(isTruthyButNotHelloWorldOrSomeParticularObject(false)).to.be.false
        expect(isTruthyButNotHelloWorldOrSomeParticularObject('hi')).to.be.true
        expect(isTruthyButNotHelloWorldOrSomeParticularObject({})).to.be.true
        expect(isTruthyButNotHelloWorldOrSomeParticularObject([])).to.be.true
      })
    })
  })
})